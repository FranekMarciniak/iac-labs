name: Example app

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependencies:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install Poetry (Windows)
        if: runner.os == 'Windows'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install Poetry (Linux)
        if: runner.os == 'Linux'
        uses: snok/install-poetry@v1.3.4
        with:
          poetry-version: "latest"

      - name: Install dependencies
        run: poetry install --no-root

      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ./example-app/.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

  static-code-tests:
    runs-on: ${{ matrix.os }}
    needs: dependencies
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ./example-app/.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Run linter
        run: poetry run task lint

      - name: Run formatter
        run: poetry run task formatter

      - name: Run security checks
        run: poetry run task security

  unit-tests:
    runs-on: ${{ matrix.os }}
    needs: static-code-tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install Poetry (Windows)
        if: runner.os == 'Windows'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install Poetry (Linux)
        if: runner.os == 'Linux'
        uses: snok/install-poetry@v1.3.4
        with:
          poetry-version: "latest"

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ./example-app/.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Run unit tests
        run: poetry run task test
